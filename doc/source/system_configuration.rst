==========================================
A Brief Overview on the System
==========================================

この章では、CASSIA Managerの全体像の理解のために、システム構成とデータ構造について説明する。

System Configuration
======================

CASSIA Manager (CM) は、Ruby on Railsフレームワークを用いて構築されており、ユーザーはウェブブラウザを用いて実行したシミュレーション結果などにアクセスすることができる。
内部のデータベースとして MongoDB および Redis を使用しており、シミュレーション実行時の情報、パラメータについての情報、ホストについての情報などが格納される。
シミュレータが出力したファイルについては、ファイルシステム上に保存される。

システム構成の概要を下図に示す。

.. image:: images/system_configuration_num.png
  :width: 30%
  :align: center

CMは登録されたリモートホストにSSH接続し、ジョブを投入する事ができる。
以下では、ユーザーからシミュレーション実行をリクエストされてから、シミュレーション結果をCMに保存するまでの処理の流れに沿ってシステムの概要を説明する。

1. まずユーザーがウェブブラウザ（①）上で実行したいシミュレーションを指定する。
2. リクエストはウェブサーバー上（②）で処理され、Workerと呼ばれるデーモンプロセス（③）に処理を依頼する。
  * Workerとはバックグラウンドで、リモートホストへのSSH接続やファイル転送などの時間がかかる処理を担当するプロセスである。
3. Workerはユーザーによって指定されたシミュレーションをリモートホスト（④）で実行する。シェルスクリプトを動的に生成し、それをシステムにあらかじめインストールされているTorqueなどのキューイングシステムを利用して実行する。
4. リモートホストでの実行が完了後、Workerが実行結果をCM実行サーバーにSFTPで転送する。結果はファイルストレージ（⑤）およびDB（⑥）に格納される。

格納された結果はブラウザからアクセス可能となる。

.. image:: images/ss_output_files.png
  :width: 30%
  :align: center

CMでは解析と呼ばれるシミュレーション結果に対するポスト処理を定義し、実行する事が可能である。
Analyzerも同様にユーザーがブラウザ経由で実行を指示することができ、Workerにより処理が実行され、ファイルサーバーおよびDBに結果が格納される。

Overview on Data Structure
==============================

CMではシミュレーション結果は図の様なSimulator, ParameterSet, Runの３層構造に分けて保存される。

.. image:: images/data_structure.png
  :width: 30%
  :align: center

Simulatorは複数のParameterSetを持ち、ParameterSetは複数のRunを持っている。
ParameterSetとはあるシミュレーターを実行するのに必要なパラメータの値の組をさす概念で、Runとは独立なモンテカルロランの一つをさす概念である。

例として、単純な交通流シミュレーターを考えよう。
この交通流シミュレーターは、道路の長さL、信号周期T、車の台数Nを入力パラメータに持つシミュレーターだとする。
ParameterSetとは、{L=100, T=10, N=10} などの組み合わせのことをさす。
このパラメータセットで乱数の種を変えて５回シミュレーションを行うとすると、５つのRunが作成されることになる。

また解析を実施した場合には、図のように解析対象の配下に格納される。

Sequence of Simulator Executions
================================

