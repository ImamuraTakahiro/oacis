%h3 List of Parameter Sets
%table.table.table-condensed.table-striped
  %thead
    %tr
      %th.span1 ID
      - @simulator.parameter_definitions.each do |key,key_def|
        %th.span1= key
  %tbody
  - @param_sets.each_with_index do |param_set,idx|
    %tr
      %td= link_to( param_set.id, parameter_set_path(param_set) )
      - @simulator.parameter_definitions.each do |key,key_def|
        %td= param_set.v[key]
= paginate @param_sets

%a.btn.btn-primary{href: new_simulator_parameter_set_path(@simulator)}
  New Parameter Set
  
- unless @simulator.parameter_set_querys.blank?
  %h4 Select query
  = form_for(@simulator, :url=>{:controller=>"simulators", :action=>"show"}, :html => { :method => :get } ) do |f|
    = select_tag "query_id", options_for_select(@query_list, @query_id), :prompt => "all"
    = f.submit "Apply query", :class => 'btn btn-primary', :name => nil      

%h4 Make query
= form_tag( _make_query_simulator_path(@simulator) ) do |f|
  %table
    %tbody
      %tr
        %td
          "Key"
        %td
          "Macher"
        %td
          "Value"
      %tr#querys_form_original
        %td#select_param_form
          = select_tag "query[][param]", options_for_select(@simulator.parameter_definitions)
        %td#select_macher_form
          = select_tag "query[][macher]", options_for_select({""=>""})
        %td#select_value_form
          = text_field_tag "query[][value]"
  .controls
    .btn#add_querys_form Add more query
  = hidden_field_tag "query_id", @query_id
  = submit_tag "Make query", :class => 'btn btn-primary'

- unless @query_id.blank?
  %h4 Delete query
  = form_tag( _make_query_simulator_path(@simulator) ) do |f|
    = hidden_field_tag "query_id", @query_id
    = submit_tag "Delete query", :class => 'btn btn-primary', :name => :delete_query
  
:javascript
  $(function() {
    $('#add_querys_form').click(function() {
      var cloned = $('#querys_form_original').clone();
      $('#add_querys_form').before($(cloned));
      $("select" ,cloned).trigger("change");
    });
  });
  
  var macher_val_Ingeter= #{raw ParameterSetQuery::NumTypeMatchers.to_json};
  var macher_text_Ingeter= #{raw ParameterSetQuery::NumTypeMatcherStrings.to_json};
  var macher_val_Float= #{raw ParameterSetQuery::NumTypeMatchers.to_json};
  var macher_text_Float= #{raw ParameterSetQuery::NumTypeMatcherStrings.to_json};
  var macher_val_Boolean= #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
  var macher_text_Boolean= #{raw ParameterSetQuery::BooleanTypeMatchers.to_json};
  var macher_val_String= #{raw ParameterSetQuery::StringTypeMatchers.to_json};
  var macher_text_String= #{raw ParameterSetQuery::StringTypeMatchers.to_json};

  $(function() {
    $("body").on("change", "#select_param_form select", function(){
      //alert($(":selected",this).attr('value') + ":" + $(":selected",this).attr('type')+ ":default=" + $(":selected",this).attr('default')+ ":" + $(":selected",this).attr('description'));
      $("#select_macher_form option",$(this).parent().parent()).remove()
      var macher_form_selector = $("#select_macher_form",$(this).parent().parent())
      if($(":selected",this).attr('type') == "Integer") {
        for(i in macher_val_Ingeter){
          $("select",macher_form_selector).append("<option value=\"\"></option>");
          $("option:nth-child("+(parseInt(i)+1)+")",macher_form_selector).val(macher_val_Ingeter[i]).text(macher_text_Ingeter[i]);
        }
      }else if($(":selected",this).attr('type') == "Float") {
        for(i in macher_val_Float){
          $("select",macher_form_selector).append("<option value=\"\"></option>");
          $("option:nth-child("+(parseInt(i)+1)+")",macher_form_selector).val(macher_val_Float[i]).text(macher_text_Float[i]);
        }
      }else if($(":selected",this).attr('type') == "Boolean") {
        for(i in macher_val_Boolean){
          $("select",macher_form_selector).append("<option value=\"\"></option>");
          $("option:nth-child("+(parseInt(i)+1)+")",macher_form_selector).val(macher_val_Boolean[i]).text(macher_text_Boolean[i]);
        }
      }else if($(":selected",this).attr('type') == "String") {
        for(i in macher_val_String){
          $("select",macher_form_selector).append("<option value=\"\"></option>");
          $("option:nth-child("+(parseInt(i)+1)+")",macher_form_selector).val(macher_val_String[i]).text(macher_text_String[i]);
        }
      }
      
      var value_form_selector = $("#select_value_form",$(this).parent().parent())
      $("input",value_form_selector).remove()
      value_form_selector.append("<input id=\"query__value\" name=\"query[][value]\" type=\"text\" value="+ $(":selected",this).attr('default') +">")
    });
  });
  
  $(function() {
    var parameter_form_selector = $("#select_param_form select")
    parameter_form_selector.val("#{@simulator.parameter_definitions.keys[0]}");
    parameter_form_selector.trigger("change");
  });
