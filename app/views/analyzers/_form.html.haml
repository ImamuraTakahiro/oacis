- path = analyzer.persisted? ? analyzer : [simulator, analyzer]
= form_for path, html: {class: 'form-horizontal'}, builder: ApplicationFormBuilder do |f|
  = render partial: 'shared/error_messages', locals: {error_messages: analyzer.errors.full_messages}
  - has_child = analyzer.analyses.present?
  .form-group
    = f.label_with_tooltip(:name, ['analyzer','name'])
    .col-md-3
      = f.text_field(:name, class: 'text_field form-control', disabled: has_child)
  .form-group
    = f.label_with_tooltip(:type, ['analyzer','type'])
    .col-md-3
      = f.select(:type, ["on_run", "on_parameter_set"], {}, class: 'form-control', disabled: has_child)
  #parameters_form.form-group
    = label_with_tooltip('Definition of Parameters', 'analyzer','definition_of_parameters').html_safe
    .col-md-10
      = f.fields_for :parameter_definitions do |builder|
        = render partial: 'executable/parameter_definition_fields', locals: {f: builder, disabled: has_child}
      - unless has_child
        = link_to_add_fields "Add Parameter", f, :parameter_definitions, 'executable/parameter_definition_fields'
  .form-group
    = f.label_with_tooltip(:pre_process_script, ['analyzer','pre_process_script'])
    .col-md-6
      = f.text_area(:pre_process_script, rows: 3, class: 'form-control')
  .form-group
    = f.label_with_tooltip(:local_pre_process_script, ['analyzer','local_pre_process_script'])
    .col-md-6
      = f.text_area(:local_pre_process_script, rows: 1, class: 'form-control')
  .form-group
    = f.label_with_tooltip(:command, ['analyzer','command'])
    .col-md-6
      = f.text_field(:command, class: 'form-control')
  .form-group
    = f.label_with_tooltip(:print_version_command, ['analyzer','print_version_command'])
    .col-md-6
      = f.text_field(:print_version_command, class: 'form-control')
  .form-group
    = f.label_with_tooltip(:support_input_json, "Input type", ['analyzer','input_type'])
    .col-md-3
      = f.select(:support_input_json, {"Argument" => false, "JSON" => true}, {},{class: 'form-control'})
  .form-group
    = f.label_with_tooltip(:files_to_copy, ['analyzer','files_to_copy'])
    .col-md-6
      = f.text_area(:files_to_copy, rows:2, class: 'form-control')
  .form-group
    = f.label_with_tooltip(:support_mpi, ['analyzer','support_mpi'])
    .col-md-2
      .checkbox
        %label
          = f.check_box(:support_mpi)
  .form-group
    = f.label_with_tooltip(:support_omp, ['analyzer','support_omp'])
    .col-md-2
      .checkbox
        %label
          = f.check_box(:support_omp)
  .form-group
    = f.label_with_tooltip(:auto_run, ['analyzer','auto_run'])
    .col-md-3
      = f.select(:auto_run, [:no,:yes,:first_run_only], {}, id: "auto_run", class: 'form-control')
  .form-group
    = f.label_with_tooltip(:description, ['analyzer','description'])
    .col-md-6
      = f.text_area(:description, rows: 5, class: 'form-control')
  .form-group
    = label_with_tooltip('Executable_on', 'analyzer', 'executable_on').html_safe
    .col-md-10
      = hidden_field_tag "analyzer[executable_on_ids][]", nil
      - Host.all.each do |host|
        .checkbox
          %label{ for: dom_id(host) }
            = check_box_tag "analyzer[executable_on_ids][]", host.id.to_s, analyzer.executable_on_ids.include?(host.id), id: dom_id(host)
            = host.name
  .form-group
    = f.label_with_tooltip(:auto_run_submitted_to, "Host for Auto Run", ['analyzer','host_for_auto_run'])
    .col-md-3
      - selected_id = analyzer.auto_run_submitted_to.try(:id).try(:to_s) || analyzer.auto_run_host_group.try(:id).try(:to_s)
      - opts = (Host.all.map {|h| [h.name, h.id]}) + (HostGroup.all.map {|hg| ["(HostGroup) #{hg.name}", hg.id]})
      - host_options = options_for_select( opts, selected: selected_id)
      = f.select(:auto_run_submitted_to, host_options, {}, {class: 'form-control'})
  .form-group
    .col-md-3.col-md-offset-2
      = f.submit(class: 'btn btn-primary')
      = link_to('Cancel', simulator_path(simulator, anchor: '!tab-about'), class: 'btn btn-default')

:javascript
  $(function() {
    $('[data-toggle="tooltip"]').tooltip();
    $('select#analyzer_type').change(function() {
      var selected = $(this).val();
      var auto_run = $('select#analyzer_auto_run');
      if(selected == "on_run") {
        if( auto_run.children('[value=first_run_only]').size() == 0 ) {
          auto_run.append( $('<option>').val('first_run_only').text('first_run_only') );
        }
      }
      else if(selected == "on_parameter_set") {
        auto_run.children('[value=first_run_only]').remove();
      }
    });
    $('select#analyzer_type').trigger('change');
  });
